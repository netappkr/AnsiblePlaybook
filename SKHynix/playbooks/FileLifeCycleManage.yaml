---
- name: Ontap File Lifecycle Managed
  hosts: task_server_1_flm
  gather_facts: no
  collections:
    - netapp.ontap
  tasks:
    - name: Get rest data information
      na_ontap_rest_info:
        hostname: "{{ cluster.ip }}"
        username: "{{ cluster.ID }}"
        password: "{{ cluster.PW }}"
        https: true
        validate_certs: false
        gather_subset:
          - volume_info
        fields:
          - 'svm.name'
          - 'nas'
          - 'name'
      register: ontap_volumes
      loop: "{{ clusters }}"
      loop_control:
        loop_var: cluster

    # - name: debug show
    #   debug:
    #     msg: "{{ ontap_volumes.results }}"
    - name: Write result data to a JSON file
      copy:
        dest: "/tmp/volume_path_info.json"
        content: "{{ ontap_volumes.results | to_nice_json }}"
      register: datafile

    - name: Write result data to a config file
      copy:
        dest: "/tmp/config.yaml"
        content: "{{ flm | to_nice_yaml }}"
      register: config

    # - name: Apply json_query and debug result
    #   debug:
    #     msg: "{{ ontap_volumes.results | json_query('[].ontap_info.\"storage/volumes\".records[?nas.export_policy.name == `default`].name') }}"
        
    # - name: Filter volumes where export_policy name is 'default'
    #   set_fact:
    #     default_volumes: "{{ default_volumes | default([]) + item }}"
    #   loop: "{{ ontap_volumes.results | json_query(query) }}"
    #   vars:
    #     query: "[].ontap_info.\"storage/volumes\".records[?nas.export_policy.name == 'default'].name | [0]"
    #     default_volumes: []

    # - name: Display volumes with default export policy
    #   debug:
    #     msg: "{{ default_volumes }}"
    - name: Search for 'script' in all directories
      find:
        paths: "{{ scripts_dir }}"
        patterns: "FLM.py"
        recurse: yes
        file_type: file
      register: files_matched

    - name: Print the matched files
      debug:
        msg: "{{ files_matched.files[0].path }}"

    - name: Generate FLM list
      command: "python3 {{ files_matched.files[0].path }} -r get_scan_object --config {{ config.dest }} -f {{ datafile.dest }}"
      register: volume_list

    - name: Display volume_list
      debug:
        msg: "{{ volume_list.stdout }}"

    # - name: Execute ls -al for each mount path
    #   command: "ls -al {{ item.mount_path.split(':')[1] }}"
    #   loop: "{{ volume_list }}"
    #   register: ls_result
    #   changed_when: false
    #   ignore_errors: true

    # - name: Print ls -al results for each mount path
    #   debug:
    #     msg: "Result for {{ item.item.mount_path }}:\n{{ item.stdout }}"
    #   loop: "{{ ls_result.results }}"

    - name: xcp scan
      command: xcp scan -match "{{volume.xcp_option.match}}" -fmt "{{volume.xcp_option.fmt}}" {{ volume.mount_path }}
      ignore_errors: true
      loop: "{{ volume_list.stdout }}"
      loop_control:
        loop_var: volume
      register: scan_list

    # - name: Display scan list
    #   debug:
    #     msg: "{{scan_list}}"

    - name: Format scan results
      set_fact:
        formatted_results: "{{ formatted_results | default([]) + [item.stdout_lines[2:] | join('<br>')] }}"
      loop: "{{ scan_list.results }}"
      loop_control:
        loop_var: item

    - name: Send storage scan report via email
      mail:
        host: "{{ smtp_server }}"
        port: "{{ smtp_port }}"
        username: "{{ smtp_username }}"
        password: "{{ smtp_password }}"
        to: "{{ email_to }}"
        subject: "FLM list {{ now(utc=true,fmt='%Y-%m-%d %H:%M:%S') }} "
        body: "{{ formatted_results | join('<br>') }}"
        from: "{{ email_from }}"
        secure: starttls
        subtype: html
        headers: 
          - Content-Type="text/html"

    # - name: Display scan list stdout
    #   debug:
    #     msg: "{{results.stdout_lines}}"
    #   loop: "{{ scan_list.results }}"
    #   loop_control:
    #     loop_var: results

    # - name: Display scan list stderr
    #   debug:
    #     msg: "{{ results.stderr_lines }}"
    #   loop: "{{ scan_list.results }}"
    #   loop_control:
    #     loop_var: results
