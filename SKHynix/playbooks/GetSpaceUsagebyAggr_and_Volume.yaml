---
- name: query to usage by Aggr from each ONTAP cluster
  hosts: task_server_1
  gather_facts: no
  collections:
    - netapp.ontap
  tasks:
    - name: install the package, force upgrade
      pip:
        name: pip
        executable: pip3
        state: latest

    - name: Install Docker SDK for Python
      ansible.builtin.pip:
        name:
        - "pip>=24.0"
        - "pandas>2.0"
        executable: pip3

    - name: Get rest data information
      na_ontap_rest_info:
        hostname: "{{ cluster.ip }}"
        username: "{{ cluster.ID }}"
        password: "{{ cluster.PW }}"
        https: true
        validate_certs: false
        gather_subset:
          - aggregate_info
        fields:
          - 'space'
          - 'home_node'
      register: ontap_aggrs
      loop: "{{ clusters }}"
      loop_control:
        loop_var: cluster
    #- name: debug show
    #  ansible.builtin.debug:
    #    msg: "{{ ontap_aggrs.results }}"

    - name: Write results data to a JSON file
      copy:
        dest: "/tmp/aggrs_space_usage_info.json"
        content: "{{ ontap_aggrs.results | to_nice_json }}"
      register: aggr_datafile

- name: query to usage by volume from each ONTAP cluster
  hosts: task_server_1
  gather_facts: no
  collections:
    - netapp.ontap
  tasks:
    - name: install the package, force upgrade
      pip:
        name: pip
        executable: pip3
        state: latest

    - name: Install Docker SDK for Python
      ansible.builtin.pip:
        name:
        - "pip>=24.0"
        - "pandas>2.0"
        executable: pip3

    - name: Get rest data information
      na_ontap_rest_info:
        hostname: "{{ cluster.ip }}"
        username: "{{ cluster.ID }}"
        password: "{{ cluster.PW }}"
        https: true
        validate_certs: false
        gather_subset:
          - volume_info
        fields:
          - 'svm.name'
          - 'aggregates.name'
          - 'size'
          - 'space.snapshot.reserve_percent'
          - 'space.size'
          - 'space.used'
          - 'style'
          - 'space.logical_space.used_by_afs'
#          - 'space.physical_used'
#          - 'space.snapshot.reserve_size'
      register: ontap_volume
      loop: "{{ clusters }}"
      loop_control:
        loop_var: cluster
    # - name: debug show
    #   ansible.builtin.debug:
    #     msg: "{{ ontap_aggrs.results }}"

    - name: Write results data to a JSON file
      copy:
        dest: "/tmp/volume_space_usage_info.json"
        content: "{{ ontap_volume.results | to_nice_json }}"
      register: volume_datafile

    #- name: debug show
    #  ansible.builtin.debug:
    #    msg: "{{ datafiles.results }}"

    - name: Search for 'script' in all directories
      find:
        paths: "{{ scripts_dir }}"
        patterns: "generate_table.py"
        recurse: yes
        file_type: file
      register: files_matched

    - name: Print the matched files
      debug:
        msg: "{{ files_matched.files[0].path }}"

    - name: Generate HTML table from inode information using a Python script
      command: "python3 {{ files_matched.files[0].path }} -r aggr_volume_space_info -f {{ aggr_datafile.dest }} {{ volume_datafile.dest }}"
      register: html_table

    #- name: debug show
    #  ansible.builtin.debug:
    #    msg: "{{ html_table.results }}"

    - name: Send storage usage report via email
      mail:
        host: "{{ smtp_server }}"
        port: "{{ smtp_port }}"
        username: "{{ smtp_username }}"
        password: "{{ smtp_password }}"
        to: "{{ email_to }}"
        subject: "ONTAP Aggr and Volume space Usage Report"
        body: "{{ html_table.stdout }}"
        from: "{{ email_from }}"
        secure: starttls
        subtype: html
        headers: 
        - Content-Type="text/html"
      when: html_table.stdout is defined
