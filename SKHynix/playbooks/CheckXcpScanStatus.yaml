---
- name: Check XCP Scan Result and Send Email if Failed
  hosts: task_server_1_DLC
  gather_facts: no
  tasks:
    - name: Read the scan_list_file_results.yaml
      ansible.builtin.slurp:
        src: /tmp/scan_list_file_results.yaml
      register: result

    - name: "Parse yaml into variable"
      set_fact:
        config_mapping: "{{ result.content | b64decode | from_yaml }}"

    - name: Display config
      debug:
        msg: "{{ config_mapping }}"

    # - name: file status check
    #   ansible.builtin.file:
    #     path: "{{ config.xcp_info }}"
    #     state: file
    #   loop: "{{ config_mapping.scan_info }}"
    #   ignore_errors: true
    #   loop_control:
    #     loop_var: config
    #   register: file_list

    # - name: Display file list
    #   debug:
    #     msg: "{{ file_list }}"

    - name: Read the xcp scan info result file
      slurp:
        src: "{{ config.xcp_info }}"
      loop: "{{ config_mapping.scan_info }}"
      ignore_errors: true
      loop_control:
        loop_var: config
      register: scan_info_results

    - name: Display scan_info_results
      debug:
        msg: "{{ scan_info_results }}"

    - name: Parse the scan content
      set_fact:
        scan_contents: "{{ scan_info_result.content | b64decode }}"
        volumename : "{{ scan_info_result.config.volumename }}"
        status: "{{ (scan_info_result.content | b64decode | regex_search('STATUS\\s*:\\s*(\\w+)', '\\1')) }}"
      loop: "{{ scan_info_results.results }}"
      loop_control:
        loop_var: scan_info_result
      register: scan_info_datas
      when: scan_info_result.failed == false

    - name: Display scan_info_datas
      debug:
        msg: "{{ scan_info_datas.results }}"

    - name: Write result data to a JSON file
      copy:
        dest: "/tmp/xcp_scan_info_datas.json"
        content: "{{ scan_info_datas.results | to_nice_json }}"
      register: datafile

    - name: write result.yaml using jinia2
      template:
        src: scan_results.j2
        dest: /tmp/xcp_scan_info_datas.yaml
    # - name: Check if status is not PASSED
    #   debug:
    #     msg: "STATUS is not PASSED. File: {{ scan_info_data.ansible_facts.file_name }}, Log Path: {{ scan_info_data.ansible_facts.log_path[0] }}"
    #   loop: "{{ scan_info_datas.results }}"
    #   loop_control:
    #     loop_var: scan_info_data
    #   when: scan_info_data.ansible_facts.status[0] != "PASSED"

    - name: Search for 'script' in all directories
      find:
        paths: "{{ scripts_dir }}"
        patterns: "generate_table.py"
        recurse: yes
        file_type: file
      register: files_matched

    - name: Print the matched files
      debug:
        msg: "{{ files_matched.files[0].path }}"

    - name: Generate HTML table from inode information using a Python script
      command: "python3 {{ files_matched.files[0].path }} -r check_xcp_scan_status -f {{ datafile.dest }}"
      register: html_table

    #- name: debug show
    #  ansible.builtin.debug:
    #    msg: "{{ html_tables.results }}"

    - name: Send xcp scan status report via email
      mail:
        host: "{{ smtp_server }}"
        port: "{{ smtp_port }}"
        username: "{{ smtp_username }}"
        password: "{{ smtp_password }}"
        to: "{{ email_to }}"
        subject: "xcp scan status - {{ now(utc=false,fmt='%Y.%m.%d') }}"
        body: "{{ html_table.stdout }}"
        from: "{{ email_from }}"
        secure: starttls
        subtype: html
        headers: 
        - Content-Type="text/html"
      when: html_table.stdout is defined
