- name: Modify mount.path in file based on get.auto output
  hosts: task_server_1_DLC
  gather_facts: no
  tasks:
    - name: Read the scan_list_file_results.yaml
      ansible.builtin.slurp:
        src: /tmp/xcp_scan_info_datas.yaml
      register: result
      
    - name: "Parse yaml into variable"
      set_fact:
        config_mapping: "{{ result.content | b64decode | from_yaml }}"

    - name: Display config
      debug:
        msg: "{{ config_mapping }}"

    - name: Extract automap values
      set_fact:
        automap_values: "{{ config_mapping.xcp_result | map(attribute='config') | flatten | map(attribute='automap') | list }}"

    - name: Remove duplicate automap values
      set_fact:
        unique_automap_values: "{{ automap_values | unique }}"

    - name: Display unique automap values
      debug:
        msg: "{{ unique_automap_values }}"

    - name: Run get.auto command
      shell: | 
        getauto auto.{{ item }}
      loop: "{{unique_automap_values}}"
      register: getauto_output

    - name: Write result data to a automap file
      copy:
        dest: "/tmp/auto.{{automap.1}}"
        content: "{{ automap.0.stdout }}"
      loop: "{{ getauto_output.results | zip(unique_automap_values) | list }}"
      loop_control:
        loop_var: automap
      
    - name: Search for 'script' in all directories
      find:
        paths: "{{ scripts_dir }}"
        patterns: "Autopath.py"
        recurse: yes
        file_type: file
      register: files_matched

    - name: Print the matched files
      debug:
        msg: "{{ files_matched.files[0].path }}"

    - name: Run the Autopath.py script
      command: "python3 {{ files_matched.files[0].path }} --xcpresult {{ xcp_result.config.xcp_result }} --xcpinfo {{ xcp_result.config.xcp_info }} --replace {{ xcp_result.config.replace }} --automap {{xcp_result.config.automap}} --searchdir {{ xcp_result.config.searchdir }} --volumename {{ xcp_result.config.volumename }} --status {{ xcp_result.status }} --skipdedup on"
      loop: "{{ config_mapping.xcp_result }}"
      loop_control:
        loop_var: xcp_result
      register: autopath_results

    - name: register 
      set_fact:
        job_info: "{{ autopath_result.stdout | from_json }}"
      loop: "{{ autopath_results.results }}"
      loop_control:
        loop_var: autopath_result
      register: jobs_info

    - name: write result.yaml using jinia2
      template:
        src: autopath_results.j2
        dest: /tmp/autopath_results.yaml
      register: datafile

    - name: Search for 'script' in all directories
      find:
        paths: "{{ scripts_dir }}"
        patterns: "generate_table.py"
        recurse: yes
        file_type: file
      register: files_matched

    - name: Print the matched files
      debug:
        msg: "{{ files_matched.files[0].path }}"

    - name: Generate HTML table from inode information using a Python script
      command: "python3 {{ files_matched.files[0].path }} -r autopath_replace_status -f {{ datafile.dest }}"
      register: html_table

    #- name: debug show
    #  ansible.builtin.debug:
    #    msg: "{{ html_table.results }}"

    - name: Send DLC report via email
      mail:
        host: "{{ smtp_server }}"
        port: "{{ smtp_port }}"
        username: "{{ smtp_username }}"
        password: "{{ smtp_password }}"
        to: "{{ email_to }}"
        subject: "DLC job Report - {{ now(utc=false,fmt='%Y.%m.%d') }}"
        body: "{{ html_table.stdout }}"
        from: "{{ email_from }}"
        secure: starttls
        subtype: html
        headers: 
        - Content-Type="text/html"
      when: html_table.stdout is defined



